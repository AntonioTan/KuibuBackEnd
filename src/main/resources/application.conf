th = {
  connectionPool = "HikariCP" //use HikariCP for our connection pool
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
  properties = {
    serverName = "postgresql-db"
    portNumber = "5432"
    databaseName = "db"
    user = "db"
    password = "root"
  }
  numThreads = 10
}
akka {
  actor {
    provider = cluster
    serialization-bindings {
       "Plugins.CommonUtils.CommonTypes.JacksonSerializable" = jackson-cbor
    }
  }
  cluster {
;     seed-nodes = [
;       "akka://QianFangCluster@display-portal-seed-node-service:25259"]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


}

akka.serialization.jackson.jackson-json.compression {
  # Compression algorithm.
  # - off  : no compression
  # - gzip : using common java gzip
  algorithm = off
  # If compression is enabled with the `algorithm` setting the payload is compressed
  # when it's larger than this value.
  compress-larger-than = 0
}


akka {
  http {
    server {
      idle-timeout = infinite
    }
    client {
      idle-timeout = infinite
      host-connection-pool {
        idle-timeout = infinite
      }
    }
  }
}
